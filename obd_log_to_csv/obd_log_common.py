# OBD Log Common
# telemetry-obd-log-to-csv/obd_log_to_csv/obd_log_common.py
"""
Data and Functions shared between different programs in the
obd_log_to_csv package.
"""
from pint import UnitRegistry, UndefinedUnitError, OffsetUnitCalculusError

unit_registry = UnitRegistry()

# The following units aren't included in the base pint package
# and are needed to process data generated by python-obd project.
unit_registry.define("percent = [] = %")
unit_registry.define("ratio = []")
unit_registry.define("gps = gram / second = GPS = grams_per_second")
unit_registry.define("lph = liter / hour = LPH = liters_per_hour")
unit_registry.define("ppm = count / 1000000 = PPM = parts_per_million")
unit_registry.define("degC = Centigrade")

date_time_fields = ['iso_ts_pre', 'iso_ts_post', 'duration', ]

COMMANDS_RETURNING_LIST_RESULTS = {
    'PERCENT_TORQUE': {
        0: 'Idle',
        1: 'Engine_Point_1',
        2: 'Engine_Point_2',
        3: 'Engine_Point_3',
        4: 'Engine_Point_4',
    },
    'MASS_AIR_FLOW_SENSOR': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'ENGINE_COOLANT_TEMPERATURE': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'INTAKE_AIR_TEMPERATURE_SENSOR': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'FUEL_RATE_2': {
        0: 'engine_fuel_rate',
        1: 'vehicle_fuel_rate',
    },
    'TRANSMISSION_ACTUAL_GEAR': {
        0: 'gear',
        1: 'gear_ratio',
    },
}

def get_command_name(command_name:str, obd_response_index:int)->str:
    """
    OBD commands can return lists of results.
    These results need to be handled as their own output.
    This function creates variations on command_name based
    on the index value or based on a dictionary lookup using
    the index value.
    """
    if (
        command_name in COMMANDS_RETURNING_LIST_RESULTS and
        obd_response_index in COMMANDS_RETURNING_LIST_RESULTS[command_name]
        ):
        return f"{command_name}-{COMMANDS_RETURNING_LIST_RESULTS[command_name][obd_response_index]}"
    elif obd_response_index == 0:
        return command_name
    else:
        return f"{command_name}-{obd_response_index}"

    return command_name

def get_field_names(command_names:list)->list:
    """
    from a list of commands, return the list of field names understanding that
    some commands will have multiple field names.
    """
    field_names = []
    for command_name in command_names:
        field_names.append(command_name)
        if command_name in COMMANDS_RETURNING_LIST_RESULTS:
            for key, value in COMMANDS_RETURNING_LIST_RESULTS[command_name].items():
                field_names.append(f"{command_name}-{value}")

    return field_names

def pint_to_value_type(obd_response_value:str, verbose:bool=False):
    """Returns a workable obd_response_value.
       When obd_response_values are numeric, they are expressed as
        - number, 
        - single space and
        - units,
       they will be translated to just a number.
       Sometimes obd_response_values are 'no response' in which case
       they will be replaced with None.
       Othertimes obd_response_values will be a string which may or may not
       contain commas.  In this case, the string will be wrapped with double
       quotes.
    """
    if obd_response_value in {'no response', 'not supported'}:
        return None, None

    try:
        pint_value = unit_registry(obd_response_value)
    except UndefinedUnitError:
        return obd_response_value, None
    except OffsetUnitCalculusError as e:
        if verbose:
            print(f"Pint unit_registry error on {obd_response_value}. " +
            f"Returning \"{(obd_response_value.split())[0]}\" as value")
        return (obd_response_value.split())[0], None

    try:
        value, units = pint_value.to_tuple()
    except AttributeError as e:
        if verbose:
            print(f"Pint unit_registry error on {obd_response_value}. ",
                    f"AttributeError: {e}")
        return pint_value, None

    return value, units[0][0]
